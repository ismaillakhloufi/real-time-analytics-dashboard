


import sys
# append the path of the parent directory
sys.path.append("./")

import yfinance as yf
import pandas as pd
import numpy as np
import random
import json
from datetime import datetime, timedelta, time, timezone
from dotenv import load_dotenv
import time as t
import pytz

load_dotenv()

def send_to_kafka(producer, topic, key, partition, message):
    print("topic",topic)
    try:
        if not topic or not isinstance(topic, str):
            raise ValueError("Invalid Kafka topic provided.")
        print("Sent to Kafka:", message)
        producer.produce(topic, key=key, partition=partition, value=json.dumps(message).encode("utf-8"))
        producer.flush()
    except Exception as e:
        print(f"Error sending message to Kafka: {e}")



def retrieve_historical_data(producer, stock_symbol, kafka_topic, logger):
    # Split multiple stock symbols
    stock_symbols = stock_symbol.split(",") if stock_symbol else []
    print("stock_symbols: ", stock_symbols)
    if not stock_symbols:
        logger.error("No stock symbols provided.")
        exit(1)
    
    # Define the date range for yesterday's data
    end_date = datetime.now().strftime('%Y-%m-%d')
    start_date = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
    
    for symbol_index, stock_symbol in enumerate(stock_symbols):
        logger.info(f"Fetching historical data for {stock_symbol}")
        historical_data = yf.download(stock_symbol, start=start_date, end=end_date, interval="1m", prepost=True)
        
        # Reset the index to ensure 'Datetime' is a column
        historical_data.reset_index(inplace=True)
        
        # Flatten column names
        historical_data.columns = [col if isinstance(col, str) else col[0] for col in historical_data.columns]
        
        # Handle empty data
        if historical_data.empty:
            logger.error(f"No data fetched for {stock_symbol}.")
            continue
        
        # Adjust timestamps to simulate today's data and make them timezone-aware
        local_timezone = pytz.timezone("UTC")  # Adjust to your timezone if necessary
        historical_data['SimulatedDatetime'] = historical_data['Datetime'] + timedelta(days=1)
        historical_data['SimulatedDatetime'] = historical_data['SimulatedDatetime'].dt.tz_convert('UTC')

        print(historical_data)
        # Ensure the current time is timezone-aware
        current_time = datetime.now().astimezone(pytz.UTC)
        print(current_time)
        # Filter only rows within the current hour and earlier
        relevant_data = historical_data[
            historical_data['SimulatedDatetime'] >= current_time
        ]

        if relevant_data.empty:
            logger.warning(f"No relevant data for {stock_symbol} at this time.")
            continue
       

# Define a factor for variability (you can adjust it)
        something = 0.02  # 2% variability for instance
        # Iterate through the filtered data in reverse to simulate bottom-to-top processing
        for index, row in relevant_data.iterrows():
            base_timestamp = row['SimulatedDatetime']
            current_time = datetime.now().astimezone(pytz.UTC)
            if base_timestamp >(current_time+ timedelta(minutes=1)):
                break  # Stop if we've reached or exceeded the current time

            # Simulate 5-second intervals
            for i in range(12):  # 12 intervals in a minute
                simulated_timestamp = base_timestamp + timedelta(seconds=i * 5)

                # Break if simulated timestamp exceeds the current time
                if simulated_timestamp > current_time+ timedelta(minutes=1):
                    break

                # Create a simulated data point
                open_value = row['Open']
                high_value = row['High']
                low_value = row['Low']
                close_value = row['Close']
                volume_value = row['Volume']

                # Adding randomness to each value
                historical_data_point = {
                    'stock': stock_symbol,
                    'date': simulated_timestamp.isoformat(),
                    'open': open_value + something * random.uniform(-1, 1) * open_value,
                    'high': high_value + something * random.uniform(-1, 1) * high_value,
                    'low': low_value + something * random.uniform(-1, 1) * low_value,
                    'close': close_value + something * random.uniform(-1, 1) * close_value,
                    'volume': volume_value + something * random.uniform(-1, 1) * volume_value
                }

                logger.info(f"Sending to Kafka: {historical_data_point}")
                # Send the data to Kafka
                send_to_kafka(producer, kafka_topic, stock_symbol, symbol_index, historical_data_point)
                t.sleep(5)  # Simulate delay between sends

def retrieve_real_time_data(producer, stock_symbol, kafka_topic, logger):
    # Define the stock symbol for real-time data
    logger.debug(f"Starting the data retrieval process for stock symbols: {stock_symbol}")
    retrieve_historical_data(producer, stock_symbol, kafka_topic, logger)
    stock_symbols = stock_symbol.split(",") if stock_symbol else []
    if not stock_symbols:
        logger.error(f"No stock symbols provided in the environment variable.")
        exit(1)
    
    logger.debug(f"Stock symbols to retrieve: {stock_symbols}")
    
    while True:
        # Fetch real-time data for the last 1 minute
        current_time = datetime.now()
        logger.debug(f"Current time: {current_time.isoformat()}")
        
        is_market_open_bool = is_stock_market_open(current_time)
        logger.debug(f"Is the market open? {is_market_open_bool}")
        
        if is_market_open_bool:
            end_time = datetime.now()
            start_time = end_time - timedelta(days=1)
            logger.debug(f"Market is open. Retrieving data from {start_time.isoformat()} to {end_time.isoformat()}")
            
            for symbol_index, stock_symbol in enumerate(stock_symbols):
                logger.debug(f"Retrieving data for symbol: {stock_symbol}, index: {symbol_index}")
                
                try:
                    real_time_data = yf.download(stock_symbol, start=start_time, end=end_time, interval="2m")
                    
                    if not real_time_data.empty:
                        # Convert and send the latest real-time data point to Kafka
                        latest_data_point = real_time_data.iloc[-1]
                        real_time_data_point = {
                            'stock': stock_symbol,
                            'date': datetime.now(),
                            'open': latest_data_point['Open'],
                            'high': latest_data_point['High'],
                            'low': latest_data_point['Low'],
                            'close': latest_data_point['Close'],
                            'volume': latest_data_point['Volume']
                        }
                        logger.debug(f"Latest data for {stock_symbol}: {real_time_data_point}")
                        send_to_kafka(producer, kafka_topic, stock_symbol, symbol_index, real_time_data_point)
                        logger.info(f"Stock value retrieved and pushed to Kafka topic {kafka_topic} for {stock_symbol}")
                    else:
                        logger.warning(f"No real-time data returned for {stock_symbol}")
                
                except Exception as e:
                    logger.error(f"Error retrieving real-time data for {stock_symbol}: {e}")
        
        else:
            logger.debug(f"Market is closed. Sending null data.")
            
            for symbol_index, stock_symbol in enumerate(stock_symbols):
                null_data_point = {
                    'stock': stock_symbol,
                    'date': current_time.isoformat(),
                    'open': None,
                    'high': None,
                    'low': None,
                    'close': None,
                    'volume': None
                }
                
                logger.info(f"Null data sent to Kafka topic {kafka_topic} for {stock_symbol}")

        t.sleep(3)

def get_stock_details(stock_symbol, logger):
    stock_symbols = stock_symbol.split(",") if stock_symbol else []
    print(stock_symbols)
    logger.info(stock_symbols)
    
    if not stock_symbols:
        logger.error(f"No stock symbols provided in the environment variable.")
        exit(1)
    
    stock_details = []
    for stock_symbol in stock_symbols:
        try:
            ticker = yf.Ticker(stock_symbol)
            logger.info(f"Fetching info for {stock_symbol}")
            
            # Debug: Log the entire ticker info
            logger.info(f"Ticker info for {stock_symbol}: {ticker.info}")
            
            stock_info = {
                'Date': datetime.now().strftime('%Y-%m-%d'),
                'Symbol': stock_symbol,
                'ShortName': ticker.info.get('shortName', None),
                'LongName': ticker.info.get('longName', None),
                'Industry': ticker.info.get('industry', None),
                'Sector': ticker.info.get('sector', None),
                'MarketCap': ticker.info.get('marketCap', None),
                'ForwardPE': ticker.info.get('forwardPE', None),
                'TrailingPE': ticker.info.get('trailingPE', None),
                'Currency': ticker.info.get('currency', None),
                'FiftyTwoWeekHigh': ticker.info.get('fiftyTwoWeekHigh', None),
                'FiftyTwoWeekLow': ticker.info.get('fiftyTwoWeekLow', None),
                'FiftyDayAverage': ticker.info.get('fiftyDayAverage', None),
                'Exchange': ticker.info.get('exchange', None),
                'ShortRatio': ticker.info.get('shortRatio', None)
            }
            stock_details.append(stock_info)
            print(stock_info)
            t.sleep(1)  # Add delay to avoid rate-limiting
        except Exception as e:
            logger.error(f"Error fetching stock details for {stock_symbol}: {str(e)}")
    
    return stock_details

def is_stock_market_open(current_datetime=None):
    # If no datetime is provided, use the current datetime
    if current_datetime is None:
        current_datetime = datetime.now()

    # Define NYSE trading hours in Eastern Time Zone
    market_open_time = time(9, 30)
    market_close_time = time(16, 0)

    # Convert current_datetime to Eastern Time Zone
    current_time_et = current_datetime.astimezone(timezone(timedelta(hours=-4)))  # EDT (UTC-4)

    # Check if it's a weekday and within trading hours
    if current_time_et.weekday() < 5 and market_open_time <= current_time_et.time() < market_close_time:
        return True
    else:
        return False


